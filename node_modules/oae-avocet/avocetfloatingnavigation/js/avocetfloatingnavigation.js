/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

 define(['jquery', 'oae.core'], function($, oae) {

    /** Distance from top of window that an element should be at to be considered active. */
    var SCROLL_OFFSET = 50;

    /** Distance above footer to use as the lowest point for the nav to scroll to. */
    var FOOTER_PADDING = 20;

    /** Selector for the footer element. */
    var FOOTER_SELECTOR = '#oa-avocetfooter';

    /**
     * The avocetfloatingnavigation widget.
     *
     * There are 3 required data- params to set on the widget's main element:
     *   - data-scroll-element: Set to a jQuery selector to match the element
     *          being scrolled. 'body' is a common value.
     *   - data-nav-title: The text for the title above to navigation entries.
     *   - data-nav-entries: A JSON string containing an ordered Array of
     *          Objects. Each Object represents an entry in the navigation.
     *
     *          The Objects have 2 required keys, 'name' and 'target'. 'name'
     *          is the name displayed of the nav entry. 'target' is a jQuery
     *          selector matching the ID of an Element in data-scroll-element.
     *          The nav entry will become active when the 'target' element is
     *          scrolled into view.
     *
     *          Multi-level navigations can be created by adding a
     *          'children' key to an Object. The value should be an Array of
     *          nav Objects as described here.
     */
    return function(uid) {

        // The widget container
        var $rootel = $('#' + uid);

        var $navTemplate = $('#oa-avocetfloatingnavigation-nav-template', $rootel);
        var $navigation = $('.avocetfloatingnavigation', $rootel);

        var scrollElementSelector = $rootel.data('scroll-element');
        var $scrollElement = $($rootel.data('scroll-element'));
        var navEntries = $rootel.data('nav-entries');
        var navTitle = $rootel.data('nav-title');

        if ($scrollElement.length !== 1) {
            throw new Error('Expected 1 scroll element to be selected but got: ' + $scrollElement.length + ', data-scroll-element: ' + scrollElementSelector);
        }

        if (!(navEntries instanceof Array)) {
            throw new Error('expected an Array for data-nav-entries, got: ' + navEntries);
        }

        if (!_.isString(navTitle) && navTitle) {
            throw new Error('data-nav-title must be given a value');
        }

        oae.api.util.template().render($navTemplate, {'navs': navEntries, 'navTitle': navTitle}, $navigation);

        /**
         * Initialises the dynamic aspects of the navigation.
         *
         * @api private
         */
        var initialise = function() {
            // Update the navigation with an 'active' class on the nav section
            // corresponding to the content area 
            $scrollElement.scrollspy({
                'target': '#' + uid + ' ' + '.avocetfloatingnavigation',
                'offset': SCROLL_OFFSET
            });

            // Have the navigation stay fixed in the window between the top and
            // bottom positions specified:
            $('.avocetfloatingnavigation-fix', $rootel).affix({
                offset: {
                    top: $navigation.offset().top,
                    bottom: $(FOOTER_SELECTOR).outerHeight(true) + FOOTER_PADDING
                }
            });
        };

        // Defer initialisation of scrollspy & affix until the page is visible.
        // This is detected by waiting for the first scroll. If initialise
        // immediatley the page isn't visible so scrollspy doesn't work
        // correctly.
        var firstScroll = function() {
            initialise();
            $(window).off('scroll', firstScroll);
        };
        $(window).on('scroll', firstScroll);
    };
});
