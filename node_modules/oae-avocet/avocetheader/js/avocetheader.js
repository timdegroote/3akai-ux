/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

 define(['jquery', 'oae.core'], function($, oae) {

    return function(uid) {

        // The widget container
        var $rootel = $('#' + uid);

        var activePage = window.location.pathname;

        var noAuth = $rootel.hasClass('oa-avocetheader-no-auth');
        var noUpload = $rootel.hasClass('oa-avocetheader-no-upload');
        var links = $rootel.data('links') || [
            {
                'href': '/',
                'title': 'Home'
            },
            {
                'href': '/todo',
                'title': 'About',
                'subLinks': [
                    {
                        'href': '/todo',
                        'title': 'What do I need to do?'
                    },
                    {
                        'href': '/changing',
                        'title': 'What\'s changing?'
                    },
                    {
                        'href': '/openaccess',
                        'title': 'What is open access?'
                    }
                ]
            }
        ];

        /**
         * Initialise the top navigation
         */
        var initNavigation = function() {
            // Gets the active link from the links array, if a sublink is currently active it returns the parent link
            var activeNavItem = _.find(links, function(link) {
                return link.href === activePage || _.find(link.subLinks, function(subLink) {
                    return subLink.href === activePage;
                });
            });

            oae.api.util.template().render($('#oa-avocetheader-nav-template', $rootel), {
                'activeNavLink': activeNavItem ? activeNavItem.href : null,
                'links': links
            }, $('#oa-avocetheader-nav-container', $rootel));

            oae.api.util.template().render($('#oa-avocetheader-subnav-template', $rootel), {
                'activePage': activePage,
                'activeNavLink': activeNavItem ? activeNavItem.href : null,
                // Only supply links which have sublinks defined to the template
                'links': _.filter(links, function(link) {
                    return link.subLinks;
                })
            }, $('#oa-avocetheader-subnav-container', $rootel));

            // Cache the currently active subnavigation if there is one
            var $activeSubnav = $('.oa-subnav-active', $rootel);

            // Resets the subnavigation to its original state
            var resetSubnavigation = function() {
                $('.oa-subnav-active', $rootel).removeClass('oa-subnav-active');
                $activeSubnav.addClass('oa-subnav-active');
            };

            $('#oa-avocetheader-nav-container a', $rootel).on('mouseenter focus', function() {
                var $el = $(this);
                var subnavSelector = $el.data('toggle-subnav');
                // Toogle the subnavigation for this navigation item if one is specified
                if (subnavSelector) {
                    $('.oa-subnav-active', $rootel).removeClass('oa-subnav-active');
                    $(subnavSelector, $rootel).addClass('oa-subnav-active');
                } else if ($('[data-toggle-subnav]:focus', $rootel).length === 0) {
                    // Only reset the subnavigation if a link with subitems doesn't have focus
                    resetSubnavigation();
                }
            });

            // Reset the subnavigation to its original state when the mouse leaves the header and/or when the header loses focus
            $rootel.on('mouseleave focusout', function() {
                // Wait until the next element has gained focus before checking whether keyboard focus is still inside the header
                _.defer(function() {
                    if ($(':focus', $rootel).length === 0) {
                        resetSubnavigation();
                    }
                });
            });
        };

        /**
         * Initialise signin/signout functionality in the header
         */
        var initAuthentication = function() {
            oae.api.util.template().render($('#oa-avocetheader-authentication-template', $rootel), {
                'noAuth': noAuth,
                'noUpload': noUpload
            }, $('#oa-avocetheader-authentication-container', $rootel));
            // Trigger a login when the login button is clicked.
            $rootel.on('click', '#oa-avocetheader-login', oae.api.authentication.loginFirstEnabledStrategy);
            // Log the current user out when the log out button is clicked
            $rootel.on('click', '#oa-avocetheader-logout', function() {
                oae.api.authentication.logout(function() {
                    window.location = '/';
                });
            });
        };

        initNavigation();
        initAuthentication();
    };
});
