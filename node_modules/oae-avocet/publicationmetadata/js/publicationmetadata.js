/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', '/shared/vendor/js/l10n/cultures/globalize.culture.en-GB.js'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        var publication = widgetData.publication;
        var publicationSubmitter = widgetData.publicationSubmitter;

        // List the metadata fields in format:
        // {key: [field label, field icon class, getValue function, custom template selector], key: ...}
        var fields = {
            'reference': ['Reference', 'bookmark', function(publication) {
                return publication.ticket.externalId;
            }],
            'accepted': ['Accepted', 'ok', function(publication) {
                return !publication.acceptanceDate ? 'Unknown' : oae.api.util.utcDateToLocal(publication.acceptanceDate);
            }],
            'submitted': ['Submitted', 'upload-alt', function(publication) {
                return oae.api.util.utcDateToLocal(publication.date);
            }],
            'uploadedBy': ['Uploaded by', 'user', function(publication) {
                return publicationSubmitter.displayName;
            }]
        };

        /**
         * Return an array of metadata objects required by the template based on an array of metadata field keys
         *
         * @param  {String[]}    fields       The fields to generate metadata template data for
         * @return {Object[]}                 The metadata template data
         */
        var getMetadataTemplateDataForFields = function(fields) {
            return _.chain(fields).map(function(fieldData) {
                return getMetadataTemplateData(fieldData);
            }).compact().value();
        };

        /**
         * Get the template data for a single metadata field
         *
         * @param  {Object}    fieldData    The field data (from the fields array)
         * @return {Object}                 The metadata field template data
         */
        var getMetadataTemplateData = function(fieldData) {
            var value = fieldData[2](publication);
            return !value ? null : {
                'key': fieldData[0],
                'icon': fieldData[1],
                'value': value
            };
        };

        /**
         * Renders the metadata template
         */
        var renderMetadata = function() {
            oae.api.util.template().render($('#oa-publicationmetadata-template', $rootel), {
                'metadata': getMetadataTemplateDataForFields(fields)
            }, $('#oa-publicationmetadata-container', $rootel));
        };

        /**
         * Binds all necessary events
         */
        var addBinding = function() {
            $rootel.on('click', '#oa-publicationmetadata-share-link', function() {
                this.select();
            });
        };

        renderMetadata();
        addBinding();
    };

});
